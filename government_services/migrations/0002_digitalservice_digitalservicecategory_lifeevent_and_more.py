# Generated by Django 4.2.16 on 2025-08-03 07:48

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('government_services', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DigitalService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Service Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('short_description', models.CharField(blank=True, max_length=150, verbose_name='Short Description')),
                ('icon', models.CharField(default='fas fa-cog', max_length=50, verbose_name='Icon Class')),
                ('color', models.CharField(default='primary', max_length=20, verbose_name='Color Class')),
                ('image', models.ImageField(blank=True, null=True, upload_to='services/', verbose_name='Service Image')),
                ('official_website', models.URLField(blank=True, verbose_name='Official Website')),
                ('service_url', models.URLField(blank=True, verbose_name='Service URL')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='Phone Number')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('difficulty', models.CharField(choices=[('easy', 'Easy - 5 min'), ('medium', 'Medium - 15 min'), ('hard', 'Hard - 30+ min')], default='medium', max_length=10, verbose_name='Difficulty Level')),
                ('urgency', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('urgent', 'Urgent')], default='medium', max_length=10, verbose_name='Urgency Level')),
                ('estimated_time', models.CharField(blank=True, max_length=50, verbose_name='Estimated Time')),
                ('required_documents', models.TextField(blank=True, verbose_name='Required Documents')),
                ('fees', models.TextField(blank=True, verbose_name='Fees')),
                ('is_automated', models.BooleanField(default=False, verbose_name='Fully Automated')),
                ('supports_bulk', models.BooleanField(default=False, verbose_name='Supports Bulk Operations')),
                ('has_express_lane', models.BooleanField(default=False, verbose_name='Express Lane Available')),
                ('requires_verification', models.BooleanField(default=True, verbose_name='Requires Verification')),
                ('status', models.CharField(choices=[('active', 'Active'), ('maintenance', 'Under Maintenance'), ('inactive', 'Inactive'), ('beta', 'Beta Testing')], default='active', max_length=15, verbose_name='Status')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Featured Service')),
                ('is_popular', models.BooleanField(default=False, verbose_name='Popular Service')),
                ('is_new', models.BooleanField(default=False, verbose_name='New Service')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='Sort Order')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='View Count')),
                ('success_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, verbose_name='Success Rate (%)')),
                ('completion_time_avg', models.PositiveIntegerField(default=0, verbose_name='Average Completion Time (minutes)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Digital Service',
                'verbose_name_plural': 'Digital Services',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DigitalServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Category Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('icon', models.CharField(default='fas fa-cog', max_length=50, verbose_name='Icon Class')),
                ('color', models.CharField(default='primary', max_length=20, verbose_name='Color Class')),
                ('gradient_start', models.CharField(default='#007bff', max_length=7, verbose_name='Gradient Start Color')),
                ('gradient_end', models.CharField(default='#0056b3', max_length=7, verbose_name='Gradient End Color')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='Sort Order')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Featured Category')),
            ],
            options={
                'verbose_name': 'Digital Service Category',
                'verbose_name_plural': 'Digital Service Categories',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='LifeEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Event Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('icon', models.CharField(default='fas fa-heart', max_length=50, verbose_name='Icon Class')),
                ('color', models.CharField(default='primary', max_length=20, verbose_name='Color Class')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='Sort Order')),
                ('services', models.ManyToManyField(related_name='life_events', to='government_services.digitalservice')),
            ],
            options={
                'verbose_name': 'Life Event',
                'verbose_name_plural': 'Life Events',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='QuickAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Action Name')),
                ('description', models.CharField(max_length=200, verbose_name='Description')),
                ('icon', models.CharField(default='fas fa-bolt', max_length=50, verbose_name='Icon Class')),
                ('color', models.CharField(default='primary', max_length=20, verbose_name='Color Class')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='Sort Order')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quick_actions', to='government_services.digitalservice')),
            ],
            options={
                'verbose_name': 'Quick Action',
                'verbose_name_plural': 'Quick Actions',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Step Title')),
                ('description', models.TextField(verbose_name='Step Description')),
                ('step_number', models.PositiveIntegerField(verbose_name='Step Number')),
                ('is_required', models.BooleanField(default=True, verbose_name='Required')),
                ('estimated_time', models.PositiveIntegerField(default=5, verbose_name='Estimated Time (minutes)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='government_services.digitalservice')),
            ],
            options={
                'verbose_name': 'Service Step',
                'verbose_name_plural': 'Service Steps',
                'ordering': ['service', 'step_number'],
                'unique_together': {('service', 'step_number')},
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('national_id', models.CharField(blank=True, max_length=20, verbose_name='National ID')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='Phone Number')),
                ('address', models.TextField(blank=True, verbose_name='Address')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('postal_code', models.CharField(blank=True, max_length=10, verbose_name='Postal Code')),
                ('preferred_language', models.CharField(default='fa', max_length=10, verbose_name='Preferred Language')),
                ('notification_preferences', models.JSONField(default=dict, verbose_name='Notification Preferences')),
                ('points', models.PositiveIntegerField(default=0, verbose_name='Digital Citizen Points')),
                ('level', models.PositiveIntegerField(default=1, verbose_name='Digital Citizen Level')),
                ('services_completed', models.PositiveIntegerField(default=0, verbose_name='Services Completed')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='digital_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='UserServiceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Request ID')),
                ('title', models.CharField(max_length=200, verbose_name='Request Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('in_progress', 'In Progress'), ('pending_documents', 'Pending Documents'), ('pending_payment', 'Pending Payment'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('completed', 'Completed'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='draft', max_length=20, verbose_name='Status')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10, verbose_name='Priority')),
                ('contact_phone', models.CharField(blank=True, max_length=20, verbose_name='Contact Phone')),
                ('contact_email', models.EmailField(blank=True, max_length=254, verbose_name='Contact Email')),
                ('documents', models.FileField(blank=True, null=True, upload_to='service_requests/', verbose_name='Documents')),
                ('additional_files', models.FileField(blank=True, null=True, upload_to='service_requests/', verbose_name='Additional Files')),
                ('progress_percentage', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Progress Percentage')),
                ('current_step', models.CharField(blank=True, max_length=100, verbose_name='Current Step')),
                ('estimated_completion', models.DateTimeField(blank=True, null=True, verbose_name='Estimated Completion')),
                ('admin_notes', models.TextField(blank=True, verbose_name='Admin Notes')),
                ('admin_response', models.TextField(blank=True, verbose_name='Admin Response')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('submitted_at', models.DateTimeField(blank=True, null=True, verbose_name='Submitted At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='government_services.digitalservice')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Service Request',
                'verbose_name_plural': 'User Service Requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.RemoveField(
            model_name='governmentservice',
            name='category',
        ),
        migrations.RemoveField(
            model_name='servicefaq',
            name='service',
        ),
        migrations.AlterUniqueTogether(
            name='serviceguide',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='serviceguide',
            name='service',
        ),
        migrations.RemoveField(
            model_name='servicerequest',
            name='service',
        ),
        migrations.RemoveField(
            model_name='servicerequest',
            name='user',
        ),
        migrations.AddField(
            model_name='servicenotification',
            name='color',
            field=models.CharField(default='info', max_length=20, verbose_name='Color Class'),
        ),
        migrations.AddField(
            model_name='servicenotification',
            name='icon',
            field=models.CharField(default='fas fa-bell', max_length=50, verbose_name='Icon Class'),
        ),
        migrations.AddField(
            model_name='servicenotification',
            name='is_urgent',
            field=models.BooleanField(default=False, verbose_name='Urgent'),
        ),
        migrations.AddField(
            model_name='servicereview',
            name='ease_of_use',
            field=models.PositiveIntegerField(blank=True, choices=[(1, '1 Star - Poor'), (2, '2 Stars - Fair'), (3, '3 Stars - Good'), (4, '4 Stars - Very Good'), (5, '5 Stars - Excellent')], null=True, verbose_name='Ease of Use'),
        ),
        migrations.AddField(
            model_name='servicereview',
            name='helpfulness',
            field=models.PositiveIntegerField(blank=True, choices=[(1, '1 Star - Poor'), (2, '2 Stars - Fair'), (3, '3 Stars - Good'), (4, '4 Stars - Very Good'), (5, '5 Stars - Excellent')], null=True, verbose_name='Helpfulness'),
        ),
        migrations.AddField(
            model_name='servicereview',
            name='is_helpful',
            field=models.PositiveIntegerField(default=0, verbose_name='Helpful Votes'),
        ),
        migrations.AddField(
            model_name='servicereview',
            name='speed',
            field=models.PositiveIntegerField(blank=True, choices=[(1, '1 Star - Poor'), (2, '2 Stars - Fair'), (3, '3 Stars - Good'), (4, '4 Stars - Very Good'), (5, '5 Stars - Excellent')], null=True, verbose_name='Speed'),
        ),
        migrations.AlterField(
            model_name='servicenotification',
            name='notification_type',
            field=models.CharField(choices=[('maintenance', 'Maintenance'), ('update', 'Update'), ('announcement', 'Announcement'), ('reminder', 'Reminder'), ('promotion', 'Promotion'), ('deadline', 'Deadline')], max_length=15, verbose_name='Type'),
        ),
        migrations.AlterField(
            model_name='servicereview',
            name='rating',
            field=models.PositiveIntegerField(choices=[(1, '1 Star - Poor'), (2, '2 Stars - Fair'), (3, '3 Stars - Good'), (4, '4 Stars - Very Good'), (5, '5 Stars - Excellent')], verbose_name='Rating'),
        ),
        migrations.DeleteModel(
            name='ServiceCategory',
        ),
        migrations.DeleteModel(
            name='ServiceFAQ',
        ),
        migrations.DeleteModel(
            name='ServiceGuide',
        ),
        migrations.DeleteModel(
            name='ServiceRequest',
        ),
        migrations.AddField(
            model_name='digitalservice',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='government_services.digitalservicecategory'),
        ),
        migrations.AlterField(
            model_name='servicenotification',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='government_services.digitalservice'),
        ),
        migrations.AlterField(
            model_name='servicereview',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='government_services.digitalservice'),
        ),
        migrations.DeleteModel(
            name='GovernmentService',
        ),
    ]
